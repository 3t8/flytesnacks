name: Flytesnacks Checks

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'cookbook/docs/**'
      - 'cookbook/deployment/**'
  pull_request:
    paths-ignore:
      - 'cookbook/docs/**'
      - 'cookbook/deployment/**'
jobs:

  # Lists all directories that have Dockerfile in them...
  list_multiarch:
    runs-on: ubuntu-latest
    name: "Create a list of packages"
    steps:
      - uses: actions/checkout@v2
      - name: "Provide the list"
        id: create-list
        run: echo "::set-output name=packages::$(find cookbook -mindepth 1 -maxdepth 5 -type f -name Dockerfile -exec dirname '{}' \; | sort | jq --raw-input . | jq --slurp . | jq -c .)"
    outputs:
      packages: "${{ steps.create-list.outputs.packages }}"

  # Lists all directories that have Dockerfile in them...
  list_amd:
    runs-on: ubuntu-latest
    name: "Create a list of packages"
    steps:
      - uses: actions/checkout@v2
      - name: "Provide the list"
        id: create-list
        run: echo "::set-output name=packages::$(find cookbook -mindepth 1 -maxdepth 5 -type f -name Dockerfile.amd -exec dirname '{}' \; | sort | jq --raw-input . | jq --slurp . | jq -c .)"
    outputs:
      packages: "${{ steps.create-list.outputs.packages }}"


  trigger_serialize_register_workflow_multiarch:
    name: Serialize & Register Flytesnacks workflow for Multi Arch
    needs: [list_multiarch]
    uses: flyteorg/flytesnacks/.github/workflows/serialize_workflow.yml@reuseable
    with:
      packages: ${{ needs.list_multiarch.outputs.packages }}
    secrets:
      FLYTE_BOT_PAT: ${{ secrets.FLYTE_BOT_PAT }}

  trigger_serialize_register_workflow_amd:
    name: Serialize & Register Flytesnacks workflow for amd64
    needs: [list_amd]
    uses: flyteorg/flytesnacks/.github/workflows/serialize_workflow.yml@reuseable
    with:
      packages: ${{ needs.list_amd.outputs.packages }}
    secrets:
      FLYTE_BOT_PAT: ${{ secrets.FLYTE_BOT_PAT }}


  push_amd_images:
    name: Build & Push to GHCR AMD Images
    runs-on: ubuntu-latest
    needs: [list_amd]
    strategy:
      matrix:
        directory: "${{ fromJson(needs.list_amd.outputs.packages) }}"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: "0"
      - name: 'Set example name'
        id: example_id
        # add a step output `steps.build_id.outputs.id` as the unique id
        run: |
          echo "::set-output name=id::$(basename -- ${{ matrix.directory }})"
          temp=${{ matrix.directory }}
          echo "::set-output name=path::$(echo "./${temp%/*}")"
      - name: Build & Push Docker Image to Github Registry
        uses: whoan/docker-build-with-cache-action@v5
        with:
          # https://docs.github.com/en/packages/learn-github-packages/publishing-a-package
          username: "${{ secrets.FLYTE_BOT_USERNAME }}"
          password: "${{ secrets.FLYTE_BOT_PAT }}"
          image_name: ${{ github.repository_owner }}/flytecookbook
          image_tag: ${{ steps.example_id.outputs.id }}-latest,${{ steps.example_id.outputs.id }}-${{ github.sha }}
          registry: ghcr.io
          push_git_tag: ${{ github.event_name != 'pull_request' }}
          push_image_and_stages: ${{ github.event_name != 'pull_request' }}
          build_extra_args: "--compress=true --build-arg=tag=ghcr.io/${{ github.repository_owner }}/flytecookbook:${{ steps.example_id.outputs.id }}-${{ github.sha }}"
          context: ${{ steps.example_id.outputs.path }}
          dockerfile: ${{ steps.example_id.outputs.id }}/Dockerfile

  push_multi_arch_images:
    name: Build & Push to GHCR
    runs-on: ubuntu-latest
    needs: [list_multiarch]
    strategy:
      matrix:
        directory: "${{ fromJson(needs.list_multiarch.outputs.packages) }}"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: "0"
      - name: 'Set example name'
        id: example_id
        # add a step output `steps.build_id.outputs.id` as the unique id
        run: |
          echo "::set-output name=id::$(basename -- ${{ matrix.directory }})"
          temp=${{ matrix.directory }}
          echo "::set-output name=path::$(echo "./${temp%/*}")"
      - name: Prepare ${{ steps.example_id.outputs.id }} Image
        id: tags
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/${{ github.repository_owner }}/flytecookbook
          tags: |
            ${{ steps.example_id.outputs.id }}-latest
            type=sha,format=long, prefix=${{ steps.example_id.outputs.id }}-
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-single-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-single-buildx
      - name: Login to GitHub Container Registry
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: "${{ secrets.FLYTE_BOT_USERNAME }}"
          password: "${{ secrets.FLYTE_BOT_PAT }}"
      - name: Build and push DIND Image
        uses: docker/build-push-action@v2
        with:
          context: ${{ steps.example_id.outputs.path }}
          platforms: linux/arm64, linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.tags.outputs.tags }}
          build-args: "tag=ghcr.io/${{ github.repository_owner }}/flytecookbook:${{ steps.example_id.outputs.id }}-${{ github.sha }}"
          file: ${{ steps.example_id.outputs.id }}/Dockerfile
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
      - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  bump_version:
    name: Bump Version
    if: ${{ github.event_name != 'pull_request' }}
    needs: [ trigger_serialize_register_workflow_multiarch, trigger_serialize_register_workflow_amd, push_amd_images, push_multi_arch_images ] # Only to ensure it can successfully build
    uses: flyteorg/flytetools/.github/workflows/bump_version.yml@master
    secrets:
      FLYTE_BOT_PAT: ${{ secrets.FLYTE_BOT_PAT }}

  prerelease:
    name: Create Prerelease
    needs: [bump_version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: "0"
      - name: Create Pre release
        id: prerelease
        run: |
          RELEASE_ID=$(curl --location -v -X POST 'https://api.github.com/repos/flyteorg/flytesnacks/releases' \
          --header 'Accept: application/vnd.github.v3+json' \
          --header 'Authorization: Bearer ${{ secrets.FLYTE_BOT_PAT }}' \
          --data-raw '{
              "tag_name": "'${{ needs.bump-version.outputs.version }}'",
              "prerelease": true
          }' | jq -r '.id')
          echo ::set-output name=release_id::$RELEASE_ID
    outputs:
      release_id: ${{ steps.prerelease.outputs.release_id }}

  # Download artifacts again and push them to the release only if this is not a pull request
  release_workflow:
    name: Publish artifacts to github release
    runs-on: ubuntu-latest
    needs: [ prerelease ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: "0"
      - name: setup download artifact dir
        run: |
          mkdir download-artifact
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: ./download-artifact/
      - name: Package Examples
        run: |
          mkdir -p cookbook/release-snacks
          cd download-artifact
          for i in */; do tar -czvf "../cookbook/release-snacks/${i%/}.tar.gz" "$i" & done; wait
          cd .. && sudo rm -rf download-artifact/
          cp cookbook/flyte_tests_manifest.json cookbook/release-snacks/flyte_tests_manifest.json
      - name: Release test manifest
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.FLYTE_BOT_PAT }}
          GORELEASER_CURRENT_TAG: ${{ needs.bump-version.outputs.version }}

  make_release:
    name: Mark github pre-release as Release
    needs: [ release_workflow ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: "0"
      - name: Update Release
        id: release
        run: |
          curl --location -X -v POST 'https://api.github.com/repos/flyteorg/flytesnacks/releases/${{ needs.prerelease.outputs.release_id }}' \
          --header 'Accept: application/vnd.github.v3+json' \
          --header 'Authorization: Bearer ${{ secrets.FLYTE_BOT_PAT }}' \
          --data-raw '{
              "tag_name": "'${{ needs.bump-version.outputs.version }}'",
              "prerelease": false
          }'