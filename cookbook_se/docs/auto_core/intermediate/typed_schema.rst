
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_core/intermediate/typed_schema.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_core_intermediate_typed_schema.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_core_intermediate_typed_schema.py:


Typed columns in a schema
------------------------------

This example explains how a typed schema can be used in Flyte and declared in flytekit.

.. GENERATED FROM PYTHON SOURCE LINES 8-11

.. code-block:: default

    import pandas
    from flytekit import kwtypes, task, workflow


.. GENERATED FROM PYTHON SOURCE LINES 12-13

Flytekit consists of some pre-built type extenstions, one of them is the FlyteSchema type

.. GENERATED FROM PYTHON SOURCE LINES 13-15

.. code-block:: default

    from flytekit.types.schema import FlyteSchema


.. GENERATED FROM PYTHON SOURCE LINES 16-18

FlyteSchema is an abstract Schema type that can be used to represent any structured dataset which has typed
(or untyped) columns

.. GENERATED FROM PYTHON SOURCE LINES 18-21

.. code-block:: default

    out_schema = FlyteSchema[kwtypes(x=int, y=str)]



.. GENERATED FROM PYTHON SOURCE LINES 22-28

To write to a schema object refer to :py:func:`flytekit.FlyteSchema.open` method. Writing can be done using
Any of the supported dataframe formats.

.. todo::

  Reference the supported dataframe formats here

.. GENERATED FROM PYTHON SOURCE LINES 28-36

.. code-block:: default

    @task
    def t1() -> out_schema:
        w = out_schema()
        df = pandas.DataFrame(data={"x": [1, 2], "y": ["3", "4"]})
        w.open().write(df)
        return w



.. GENERATED FROM PYTHON SOURCE LINES 37-40

To read a Schema, one has to invoke the :py:func:`flytekit.FlyteSchema.open`. The default mode is automatically
configured to be `open` and the default returned dataframe type is :py:class:`pandas.DataFrame`
Different types of dataframes can be returned based on the type passed into the open method

.. GENERATED FROM PYTHON SOURCE LINES 40-52

.. code-block:: default

    @task
    def t2(schema: FlyteSchema[kwtypes(x=int, y=str)]) -> FlyteSchema[kwtypes(x=int)]:
        assert isinstance(schema, FlyteSchema)
        df: pandas.DataFrame = schema.open().all()
        return df[schema.column_names()[:-1]]


    @workflow
    def wf() -> FlyteSchema[kwtypes(x=int)]:
        return t2(schema=t1())



.. GENERATED FROM PYTHON SOURCE LINES 53-55

Local execution will convert the data to and from the serialized representation thus, mimicing a complete distributed
execution.

.. GENERATED FROM PYTHON SOURCE LINES 55-58

.. code-block:: default

    if __name__ == "__main__":
        print(f"Running {__file__} main...")
        print(f"Running wf(), returns columns {wf().columns()}")


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_core_intermediate_typed_schema.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: typed_schema.py <typed_schema.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: typed_schema.ipynb <typed_schema.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
