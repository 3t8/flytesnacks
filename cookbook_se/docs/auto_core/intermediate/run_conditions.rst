
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_core/intermediate/run_conditions.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_core_intermediate_run_conditions.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_core_intermediate_run_conditions.py:


Conditions
--------------

Flytekit supports conditions as a first class construct in the language. Conditions offer a way to selectively execute
branches of a workflow based on static or dynamic data produced by other tasks or come in as workflow inputs.
Conditions are very performant to be evaluated however, they are limited to certain binary and logical operators and can
only be performed on primitive values.

.. GENERATED FROM PYTHON SOURCE LINES 12-13

To start off, import `conditional` module

.. GENERATED FROM PYTHON SOURCE LINES 13-19

.. code-block:: default

    import typing

    from flytekit import task, workflow
    from flytekit.annotated.condition import conditional









.. GENERATED FROM PYTHON SOURCE LINES 20-24

Example 1
^^^^^^^^^
In the following example we define two tasks `square` and `double` and depending on whether the workflow input is a
fraction (0-1) or not, it decided which to execute.

.. GENERATED FROM PYTHON SOURCE LINES 24-67

.. code-block:: default

    @task
    def square(n: float) -> float:
        """
        Parameters:
            n (float): name of the parameter for the task will be derived from the name of the input variable
                   the type will be automatically deduced to be Types.Integer

        Return:
            float: The label for the output will be automatically assigned and type will be deduced from the annotation

        """
        return n * n


    @task
    def double(n: float) -> float:
        """
        Parameters:
            n (float): name of the parameter for the task will be derived from the name of the input variable
                   the type will be automatically deduced to be Types.Integer

        Return:
            float: The label for the output will be automatically assigned and type will be deduced from the annotation

        """
        return 2 * n


    @workflow
    def multiplier(my_input: float) -> float:
        return (
            conditional("fractions")
            .if_((my_input >= 0.1) & (my_input <= 1.0))
            .then(double(n=my_input))
            .else_()
            .then(square(n=my_input))
        )


    print(f"Output of multiplier(my_input=3): {multiplier(my_input=3)}")
    print(f"Output of multiplier(my_input=0.5): {multiplier(my_input=0.5)}")






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Comparison AND called
    Comparison AND called
    Output of multiplier(my_input=3): 9
    Comparison AND called
    Output of multiplier(my_input=0.5): 1.0




.. GENERATED FROM PYTHON SOURCE LINES 68-72

Example 2
^^^^^^^^^
In the following example we have an if condition with multiple branches and we fail if no conditions are met. Flyte
expects any conditional() statement to be _complete_ meaning all possible branches have to be handled.

.. GENERATED FROM PYTHON SOURCE LINES 72-88

.. code-block:: default

    @workflow
    def multiplier_2(my_input: float) -> float:
        return (
            conditional("fractions")
            .if_((my_input > 0.1) & (my_input < 1.0))
            .then(double(n=my_input))
            .elif_((my_input > 1.0) & (my_input <= 10.0))
            .then(square(n=my_input))
            .else_()
            .fail("The input must be between 0 and 10")
        )


    print(f"Output of multiplier_2(my_input=10): {multiplier_2(my_input=10)}")






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Comparison AND called
    Comparison AND called
    Comparison AND called
    Comparison AND called
    Output of multiplier_2(my_input=10): 100




.. GENERATED FROM PYTHON SOURCE LINES 89-92

Example 3
^^^^^^^^^
In the following example we consume the output returned by the conditional() in a subsequent task.

.. GENERATED FROM PYTHON SOURCE LINES 92-110

.. code-block:: default

    @workflow
    def multiplier_3(my_input: float) -> float:
        d = (
            conditional("fractions")
            .if_((my_input > 0.1) & (my_input < 1.0))
            .then(double(n=my_input))
            .elif_((my_input > 1.0) & (my_input < 10.0))
            .then(square(n=my_input))
            .else_()
            .fail("The input must be between 0 and 10")
        )

        # d will be either the output of `double` or t he output of `square`. If the conditional() falls through the fail
        # branch, execution will not reach here.
        return double(n=d)


    print(f"Output of multiplier_3(my_input=5): {multiplier_3(my_input=5)}")




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Comparison AND called
    Comparison AND called
    Comparison AND called
    Comparison AND called
    Output of multiplier_3(my_input=5): 50





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.009 seconds)


.. _sphx_glr_download_auto_core_intermediate_run_conditions.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: run_conditions.py <run_conditions.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: run_conditions.ipynb <run_conditions.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
