
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_core/intermediate/subworkflows.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_core_intermediate_subworkflows.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_core_intermediate_subworkflows.py:


Call another workflow by subworkflow
------------------------------------------

Launch plans were introduced in the Basics section of this book. Subworkflows are similar in that they allow users
to kick off one workflow from inside another. What's the difference? Think of launch plans as passing by pointer and
subworkflows as passing by value.

When you include a launch plan of workflow A inside workflow B, when B gets run, a new workflow execution,
replete with a new workflow execution ID, a new Flyte UI link, will be run.

When you include workflow A as a subworkflow of workflow B, when B gets run, the entire workflow A graph is basically
copied into workflow B at the point where it is called.

.. GENERATED FROM PYTHON SOURCE LINES 15-26

.. code-block:: default


    import typing

    from flytekit import task, workflow


    @task
    def t1(a: int) -> typing.NamedTuple("OutputsBC", t1_int_output=int, c=str):
        return a + 2, "world"



.. GENERATED FROM PYTHON SOURCE LINES 27-29

This will be the subworkflow of our examples, but note that this is a workflow like any other. It can be run just
like any other workflow. Note here that the workflow has been declared with a default.

.. GENERATED FROM PYTHON SOURCE LINES 29-36

.. code-block:: default

    @workflow
    def my_subwf(a: int = 42) -> (str, str):
        x, y = t1(a=a)
        u, v = t1(a=x)
        return y, v



.. GENERATED FROM PYTHON SOURCE LINES 37-43

This is the parent workflow. In it, we call the workflow declared above.
This also showcases how to override the node name of a task (or subworkflow). Typically, nodes are just named
sequentially, ``node-0``, ``node-1``, and so on. Because the inner ``my_subwf`` also has a ``node-0`` you may
wish to change the name of the first one. Not doing so is also fine - Flyte will automatically prepend something
to the inner ``node-0``, since node IDs need to be distinct within a workflow graph. This issue does not exist
when calling something by launch plan since those launch a separate execution entirely.

.. GENERATED FROM PYTHON SOURCE LINES 43-52

.. code-block:: default

    @workflow
    def parent_wf(a: int) -> (int, str, str):
        x, y = t1(a=a).with_overrides(node_name="node-t1-parent")
        u, v = my_subwf(a=x)
        return x, u, v


    if __name__ == "__main__":
        print(f"Running parent_wf(a=3) {parent_wf(a=3)}")


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_core_intermediate_subworkflows.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: subworkflows.py <subworkflows.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: subworkflows.ipynb <subworkflows.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
