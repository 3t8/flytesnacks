
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_core/intermediate/custom_objects.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_core_intermediate_custom_objects.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_core_intermediate_custom_objects.py:


Using custom objects
-------------------------

Flyte supports passing JSON's between tasks. But, to simplify the usage for the users and introduce type-safety,
flytekit supports passing custom data objects between tasks. Currently only dataclasses that are decorated with
@dataclasses_json are supported.

This example shows how users can serialize custom JSON'able dataclasses between successive tasks using the excellent
`dataclasses_json <https://pypi.org/project/dataclasses-json/>` library

.. GENERATED FROM PYTHON SOURCE LINES 12-19

.. code-block:: default

    import typing
    from dataclasses import dataclass
    from dataclasses_json import dataclass_json

    from flytekit import task, workflow



.. GENERATED FROM PYTHON SOURCE LINES 20-32

This Datum is a user defined complex type, which can be used to pass complex data between tasks.
Moreover, users can also pass this data between different languages and also input through the Flyteconsole as a
raw JSON.

.. note::

  Only other supported types can be nested in this class, for example it can only contain other ``@dataclass_json``
  annotated dataclasses if you want to use complex classes. Arbitrary classes will cause a **failure**.

.. note::

  All variables in DataClasses should be **annotated with their type**. Failure to do should will result in an error

.. GENERATED FROM PYTHON SOURCE LINES 32-44

.. code-block:: default

    @dataclass_json
    @dataclass
    class Datum(object):
        """
        Example of a simple custom class that is modeled as a dataclass
        """

        x: int
        y: str
        z: typing.Dict[int, str]



.. GENERATED FROM PYTHON SOURCE LINES 45-46

Once declared dataclasses can be returned as outputs or accepted as inputs

.. GENERATED FROM PYTHON SOURCE LINES 46-64

.. code-block:: default

    @task
    def stringify(x: int) -> Datum:
        """
        A dataclass return will be regarded as a complex single json return.
        """
        return Datum(x=x, y=str(x), z={x: str(x)})


    @task
    def add(x: Datum, y: Datum) -> Datum:
        """
        Flytekit will automatically convert the passed in json into a DataClass. If the structures dont match, it will raise
        a runtime failure
        """
        x.z.update(y.z)
        return Datum(x=x.x + y.x, y=x.y + y.y, z=x.z)



.. GENERATED FROM PYTHON SOURCE LINES 65-66

Workflow creation remains identical

.. GENERATED FROM PYTHON SOURCE LINES 66-79

.. code-block:: default

    @workflow
    def wf(x: int, y: int) -> Datum:
        """
        Dataclasses (JSON) can be returned from a workflow as well.
        """
        return add(x=stringify(x=x), y=stringify(x=y))


    if __name__ == "__main__":
        """
        This workflow can be run locally. During local execution also, the dataclasses will be marshalled to and from json.
        """
        wf(x=10, y=20)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_core_intermediate_custom_objects.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: custom_objects.py <custom_objects.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: custom_objects.ipynb <custom_objects.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
