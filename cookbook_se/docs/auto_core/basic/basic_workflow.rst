
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_core/basic/basic_workflow.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_core_basic_basic_workflow.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_core_basic_basic_workflow.py:


Write a simple workflow
------------------------------

Once you've had a handle on tasks, we can move to workflows. Workflow are the other basic building block of Flyte.

Workflows string together two or more tasks. They are also written as Python functions, but it is important to make a
critical distinction between tasks and workflows.

The body of a task's function runs at "run time", i.e. on the K8s cluster, using the task's container. The body of a
workflow is not used for computation, it is only used to structure the tasks, i.e. the output of ``t1`` is an input
of ``t2`` in the workflow below. As such, the body of workflows is run at "registration" time. Please refer to the
registration docs for additional information as well since it is actually a two-step process.

Take a look at the conceptual `discussion <https://lyft.github.io/flyte/user/concepts/workflows_nodes.html#workflows>`__
behind workflows for additional information.

.. GENERATED FROM PYTHON SOURCE LINES 19-34

.. code-block:: default

    import typing

    from flytekit import task, workflow


    @task
    def t1(a: int) -> typing.NamedTuple("OutputsBC", t1_int_output=int, c=str):
        return a + 2, "world"


    @task
    def t2(a: str, b: str) -> str:
        return b + a



.. GENERATED FROM PYTHON SOURCE LINES 35-37

You can treat the outputs of a task as you normally would a Python function. Assign the output to two variables
and use them in subsequent tasks as normal.

.. GENERATED FROM PYTHON SOURCE LINES 37-44

.. code-block:: default

    @workflow
    def my_wf(a: int, b: str) -> (int, str):
        x, y = t1(a=a)
        d = t2(a=y, b=b)
        return x, d



.. GENERATED FROM PYTHON SOURCE LINES 45-53

Execute the Workflow, simply by invoking it like a function and passing in
the necessary parameters

.. note::

  One thing to remember, currently we only support ``Keyword arguments``. So
  every argument should be passed in the form ``arg=value``. Failure to do so
  will result in an error

.. GENERATED FROM PYTHON SOURCE LINES 53-55

.. code-block:: default

    if __name__ == "__main__":
        print(f"Running my_wf(a=50, b='hello') {my_wf(a=50, b='hello')}")


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_core_basic_basic_workflow.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: basic_workflow.py <basic_workflow.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: basic_workflow.ipynb <basic_workflow.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
