
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_core/advanced/run_custom_types.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_core_advanced_run_custom_types.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_core_advanced_run_custom_types.py:


.. _advanced_custom_types:

How to write/use your custom types in a task?
##################################################

Flyte is a strongly typed framework for authoring tasks and workflows. But, there are situations when the existing set
of types do not directly work. This is true with any programming language. This is when the languages support higher
level concepts to describe User specific objects - like classes in python/java/c++, struct in C/golang, etc

Flytekit allows modeling user classes similarly. The idea is to make an interface that is more productive for the
usecase, but write a transformer that transforms the user defined type to one of the generic constructs in Flyte's
Type system.

In this example, we will try to model an example user defined set and show how it can be integrated seamlessly with
Flytekit's typing engine.

.. GENERATED FROM PYTHON SOURCE LINES 20-25

.. code-block:: default

    import os
    import shutil
    import tempfile
    import typing








.. GENERATED FROM PYTHON SOURCE LINES 26-27

FlyteContext is used only to access a random local directory

.. GENERATED FROM PYTHON SOURCE LINES 27-31

.. code-block:: default

    from typing import Type

    from flytekit import FlyteContext, task, workflow








.. GENERATED FROM PYTHON SOURCE LINES 32-33

Defined type here represents a list of Files on the disk. We will refer to it as ``MyDataset``

.. GENERATED FROM PYTHON SOURCE LINES 33-68

.. code-block:: default

    from flytekit.annotated.type_engine import TypeTransformer, TypeEngine
    from flytekit.models.core.types import BlobType
    from flytekit.models.literals import Literal, Scalar, Blob, BlobMetadata
    from flytekit.models.types import LiteralType


    class MyDataset(object):
        """
        Dataset here is a set of files that exist together. In Flyte this maps to a Multi-part blob or a directory
        """

        def __init__(self, base_dir: str = None):
            if base_dir is None:
                self._tmp_dir = tempfile.TemporaryDirectory()
                self._base_dir = self._tmp_dir.name
                self._files = []
            else:
                self._base_dir = base_dir
                files = os.listdir(base_dir)
                self._files = [os.path.join(base_dir, f) for f in files]

        @property
        def base_dir(self) -> str:
            return self._base_dir

        @property
        def files(self) -> typing.List[str]:
            return self._files

        def new_file(self, name: str) -> str:
            new_file = os.path.join(self._base_dir, name)
            self._files.append(new_file)
            return new_file









.. GENERATED FROM PYTHON SOURCE LINES 69-78

``MyDataset`` represents a set of files locally, but, when a workflow consists of multiple steps, we want the data to
flow between the different steps. To achieve this, it is necessary to explain how the data will be transformed to
Flyte's remote references. To do this, we create a new instance of
:py:class:`flytekit.annotated.type_engine.TypeTransformer`, for the type ``MyDataset`` as follows

.. note::

  The TypeTransformer is a Generic abstract base class. The Generic type argument here refers to the actual object
  that we want to work with. In this case, it is the ``MyDataset`` object

.. GENERATED FROM PYTHON SOURCE LINES 78-128

.. code-block:: default

    class MyDatasetTransformer(TypeTransformer[MyDataset]):
        _TYPE_INFO = BlobType(
            format="binary", dimensionality=BlobType.BlobDimensionality.MULTIPART
        )

        def __init__(self):
            super(MyDatasetTransformer, self).__init__(
                name="mydataset-transform", t=MyDataset
            )

        def get_literal_type(self, t: Type[MyDataset]) -> LiteralType:
            """
            This is useful to tell the Flytekit type system that ``MyDataset`` actually refers to what corresponding type
            In this example, we say its of format binary (do not try to introspect) and there are more than one files in it
            """
            return LiteralType(blob=self._TYPE_INFO)

        def to_literal(
            self,
            ctx: FlyteContext,
            python_val: MyDataset,
            python_type: Type[MyDataset],
            expected: LiteralType,
        ) -> Literal:
            """
            This method is used to convert from given python type object ``MyDataset`` to the Literal representation
            """
            # Step 1: lets upload all the data into a remote place recommended by Flyte
            remote_dir = ctx.file_access.get_random_remote_directory()
            ctx.file_access.upload_directory(python_val.base_dir, remote_dir)
            # Step 2: lets return a pointer to this remote_dir in the form of a literal
            return Literal(
                scalar=Scalar(
                    blob=Blob(uri=remote_dir, metadata=BlobMetadata(type=self._TYPE_INFO))
                )
            )

        def to_python_value(
            self, ctx: FlyteContext, lv: Literal, expected_python_type: Type[MyDataset]
        ) -> MyDataset:
            """
            In this function we want to be able to re-hydrate the custom object from Flyte Literal value
            """
            # Step 1: lets download remote data locally
            local_dir = ctx.file_access.get_random_local_directory()
            ctx.file_access.download_directory(lv.scalar.blob.uri, local_dir)
            # Step 2: create the MyDataset object
            return MyDataset(base_dir=local_dir)









.. GENERATED FROM PYTHON SOURCE LINES 129-131

Before we can use MyDataset in our tasks, we need to let flytekit know that ``MyDataset`` should be considered as a
valid type. This is done using the :py:func:`flytekit.annotated.type_engine.TypeEngine.register` function.

.. GENERATED FROM PYTHON SOURCE LINES 131-134

.. code-block:: default

    TypeEngine.register(MyDatasetTransformer())









.. GENERATED FROM PYTHON SOURCE LINES 135-136

Now the new type should be ready to use. Let us write an example generator and consumer for this new datatype

.. GENERATED FROM PYTHON SOURCE LINES 136-164

.. code-block:: default



    @task
    def generate() -> MyDataset:
        d = MyDataset()
        for i in range(3):
            fp = d.new_file(f"x{i}")
            with open(fp, "w") as f:
                f.write(f"Contents of file{i}")

        return d


    @task
    def consume(d: MyDataset) -> str:
        s = ""
        for f in d.files:
            with open(f) as fp:
                s += fp.read()
                s += "\n"
        return s


    @workflow
    def wf() -> str:
        return consume(d=generate())









.. GENERATED FROM PYTHON SOURCE LINES 165-167

We can run this workflow locally and test it. Remember even when you run it locally, flytekit will excercise the
entire path

.. GENERATED FROM PYTHON SOURCE LINES 167-170

.. code-block:: default


    if __name__ == "__main__":
        print(wf())




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Contents of file0
    Contents of file1
    Contents of file2






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.013 seconds)


.. _sphx_glr_download_auto_core_advanced_run_custom_types.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: run_custom_types.py <run_custom_types.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: run_custom_types.ipynb <run_custom_types.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
