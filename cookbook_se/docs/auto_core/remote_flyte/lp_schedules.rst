
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_core/remote_flyte/lp_schedules.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_core_remote_flyte_lp_schedules.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_core_remote_flyte_lp_schedules.py:


Scheduling workflow executions with launch plans
----------------------------------------------------

For background on launch plans, refer to :any:`launch_plans`.

For up-to-date documentation on schedules, see the `official docs <https://lyft.github.io/flyte/user/concepts/launchplans_schedules.html#schedules>`_

.. GENERATED FROM PYTHON SOURCE LINES 12-13

Let's consider the following example workflow:

.. GENERATED FROM PYTHON SOURCE LINES 13-29

.. code-block:: default

    from datetime import datetime

    from flytekit import task, workflow


    @task
    def format_date(run_date: datetime) -> str:
        return run_date.strftime("%Y-%m-%d %H:%M")


    @workflow
    def date_formatter_wf(kickoff_time: datetime):
        formatted_kickoff_time = format_date(run_date=kickoff_time)
        print(formatted_kickoff_time)



.. GENERATED FROM PYTHON SOURCE LINES 30-34

Cron Expression
---------------
Cron expression strings use the `AWS syntax <http://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#CronExpressions>`_.
These are validated at launch plan registration time.

.. GENERATED FROM PYTHON SOURCE LINES 34-48

.. code-block:: default

    from flytekit import LaunchPlan
    from flytekit.annotated.schedule import CronSchedule

    # creates a launch plan that runs at 10am UTC every day.
    cron_lp = LaunchPlan.create(
        "my_cron_scheduled_lp",
        date_formatter_wf,
        schedule=CronSchedule(
            # Note that kickoff_time_input_arg matches the workflow input we defined above: kickoff_time
            cron_expression="0 10 * * ? *",
            kickoff_time_input_arg="kickoff_time",
        ),
    )


.. GENERATED FROM PYTHON SOURCE LINES 49-54

Fixed Rate
----------
If you prefer to use an interval rather than the cron syntax to schedule your workflows, this is currently supported
for Flyte deployments hosted on AWS.
To run ``date_formatter_wf`` every 10 minutes read on below:

.. GENERATED FROM PYTHON SOURCE LINES 54-81

.. code-block:: default


    from datetime import timedelta

    from flytekit import LaunchPlan
    from flytekit.annotated.schedule import FixedRate


    @task
    def be_positive(name: str) -> str:
        return f"You're awesome, {name}"


    @workflow
    def positive_wf(name: str):
        reminder = be_positive(name=name)
        print(f"{reminder}")


    fixed_rate_lp = LaunchPlan.create(
        "my_fixed_rate_lp",
        positive_wf,
        # Note that the workflow above doesn't accept any kickoff time arguments.
        # We just omit the ``kickoff_time_input_arg`` from the FixedRate schedule invocation
        schedule=FixedRate(duration=timedelta(minutes=10)),
        fixed_inputs={"name": "you"},
    )


.. GENERATED FROM PYTHON SOURCE LINES 82-84

Once you've initialized your launch plan, don't forget to set it to active so that the schedule is run.
TBD (katrogan)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_core_remote_flyte_lp_schedules.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: lp_schedules.py <lp_schedules.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: lp_schedules.ipynb <lp_schedules.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
