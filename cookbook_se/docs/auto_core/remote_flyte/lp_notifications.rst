
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_core/remote_flyte/lp_notifications.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_core_remote_flyte_lp_notifications.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_core_remote_flyte_lp_notifications.py:


Getting notifications on workflow termination
-------------------------------------------------

For background on launch plans, refer to :any:`launch_plans`.

For up-to-date documentation on notifications see the `official docs <https://lyft.github.io/flyte/user/features/notifications.html>`_

.. GENERATED FROM PYTHON SOURCE LINES 13-14

Let's consider the following example workflow:

.. GENERATED FROM PYTHON SOURCE LINES 14-43

.. code-block:: default

    from flytekit import LaunchPlan, task, workflow
    from flytekit.annotated.notification import Email
    from flytekit.models.core.execution import WorkflowExecutionPhase


    @task
    def double_int_and_print(a: int) -> str:
        return str(a * 2)


    @workflow
    def int_doubler_wf(a: int) -> str:
        doubled = double_int_and_print(a=a)
        return doubled


    # This launch plan triggers email notifications when the workflow execution it triggered reaches the phase `SUCCEEDED`.
    int_doubler_wf_lp = LaunchPlan.create(
        "int_doubler_wf",
        int_doubler_wf,
        default_inputs={"a": 4},
        notifications=[
            Email(
                phases=[WorkflowExecutionPhase.SUCCEEDED],
                recipients_email=["admin@example.com"],
            )
        ],
    )


.. GENERATED FROM PYTHON SOURCE LINES 44-45

Notifications shine when used for scheduled workflows to alert on failures:

.. GENERATED FROM PYTHON SOURCE LINES 45-64

.. code-block:: default

    from datetime import timedelta

    from flytekit.annotated.notification import PagerDuty
    from flytekit.annotated.schedule import FixedRate

    int_doubler_wf_scheduled_lp = LaunchPlan.create(
        "int_doubler_wf_scheduled",
        int_doubler_wf,
        default_inputs={"a": 4},
        notifications=[
            PagerDuty(
                phases=[WorkflowExecutionPhase.FAILED, WorkflowExecutionPhase.TIMED_OUT],
                recipients_email=["abc@pagerduty.com"],
            )
        ],
        schedule=FixedRate(duration=timedelta(days=1)),
    )



.. GENERATED FROM PYTHON SOURCE LINES 65-66

If you desire you can combine notifications with different permutations of terminal phases and recipient targets:

.. GENERATED FROM PYTHON SOURCE LINES 66-91

.. code-block:: default

    from flytekit.annotated.notification import Slack

    wacky_int_doubler_lp = LaunchPlan.create(
        "wacky_int_doubler",
        int_doubler_wf,
        default_inputs={"a": 4},
        notifications=[
            Email(
                phases=[WorkflowExecutionPhase.FAILED],
                recipients_email=["me@example.com", "you@example.com"],
            ),
            Email(
                phases=[WorkflowExecutionPhase.SUCCEEDED],
                recipients_email=["myboss@example.com"],
            ),
            Slack(
                phases=[
                    WorkflowExecutionPhase.SUCCEEDED,
                    WorkflowExecutionPhase.ABORTED,
                    WorkflowExecutionPhase.TIMED_OUT,
                ],
                recipients_email=["myteam@slack.com"],
            ),
        ],
    )


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_core_remote_flyte_lp_notifications.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: lp_notifications.py <lp_notifications.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: lp_notifications.ipynb <lp_notifications.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
